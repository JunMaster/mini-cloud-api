// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, appid, openid, session_key, unionid, appid_from, unionid_from, openid_from, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, now(), now()
) RETURNING id, openid, session_key, appid, unionid, openid_from, appid_from, unionid_from, created_at, updated_at
`

type CreateUserParams struct {
	ID          string `json:"id"`
	Appid       string `json:"appid"`
	Openid      string `json:"openid"`
	SessionKey  string `json:"session_key"`
	Unionid     string `json:"unionid"`
	AppidFrom   string `json:"appid_from"`
	UnionidFrom string `json:"unionid_from"`
	OpenidFrom  string `json:"openid_from"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Appid,
		arg.Openid,
		arg.SessionKey,
		arg.Unionid,
		arg.AppidFrom,
		arg.UnionidFrom,
		arg.OpenidFrom,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Openid,
		&i.SessionKey,
		&i.Appid,
		&i.Unionid,
		&i.OpenidFrom,
		&i.AppidFrom,
		&i.UnionidFrom,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDByAppidAndOpenid = `-- name: GetUserIDByAppidAndOpenid :one
SELECT id FROM users WHERE appid = $1 AND openid = $2
`

type GetUserIDByAppidAndOpenidParams struct {
	Appid  string `json:"appid"`
	Openid string `json:"openid"`
}

func (q *Queries) GetUserIDByAppidAndOpenid(ctx context.Context, arg GetUserIDByAppidAndOpenidParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByAppidAndOpenid, arg.Appid, arg.Openid)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserOpenDataByID = `-- name: GetUserOpenDataByID :one
SELECT openid, session_key FROM users
WHERE id=$1
`

type GetUserOpenDataByIDRow struct {
	Openid     string `json:"openid"`
	SessionKey string `json:"session_key"`
}

func (q *Queries) GetUserOpenDataByID(ctx context.Context, id string) (GetUserOpenDataByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserOpenDataByID, id)
	var i GetUserOpenDataByIDRow
	err := row.Scan(&i.Openid, &i.SessionKey)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET session_key=$1, updated_at=now()
WHERE id = $2
`

type UpdateUserParams struct {
	SessionKey string `json:"session_key"`
	ID         string `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.SessionKey, arg.ID)
	return err
}
