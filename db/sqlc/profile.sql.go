// Code generated by sqlc. DO NOT EDIT.
// source: profile.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :exec
INSERT INTO users_profile (
  id, user_id, nickname, avatar_url, gender, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, now(), now()
)
`

type CreateProfileParams struct {
	ID        string `json:"id"`
	UserID    string `json:"user_id"`
	Nickname  string `json:"nickname"`
	AvatarUrl string `json:"avatar_url"`
	Gender    string `json:"gender"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile,
		arg.ID,
		arg.UserID,
		arg.Nickname,
		arg.AvatarUrl,
		arg.Gender,
	)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT nickname, avatar_url FROM users_profile
WHERE "user_id" = $1
`

type GetProfileRow struct {
	Nickname  string `json:"nickname"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) GetProfile(ctx context.Context, userID string) (GetProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getProfile, userID)
	var i GetProfileRow
	err := row.Scan(&i.Nickname, &i.AvatarUrl)
	return i, err
}

const getProfileIDByUserId = `-- name: GetProfileIDByUserId :one
SELECT id FROM users_profile WHERE user_id = $1
`

func (q *Queries) GetProfileIDByUserId(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getProfileIDByUserId, userID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE users_profile SET nickname=$1, avatar_url=$2, gender=$3, updated_at = now()
WHERE "user_id" = $4
`

type UpdateProfileParams struct {
	Nickname  string `json:"nickname"`
	AvatarUrl string `json:"avatar_url"`
	Gender    string `json:"gender"`
	UserID    string `json:"user_id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile,
		arg.Nickname,
		arg.AvatarUrl,
		arg.Gender,
		arg.UserID,
	)
	return err
}
